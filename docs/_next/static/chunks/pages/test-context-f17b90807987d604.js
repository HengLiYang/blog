(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[290],{8557:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/test-context",function(){return n(6319)}])},6319:function(e,s,n){"use strict";n.r(s),n.d(s,{default:function(){return y}});var r=n(2676),i=n(5271);let t=(0,i.createContext)(null),d=()=>{let e=(0,i.useContext)(t);if(!e)throw Error("useMessage must be used within MessageProvider");return e},l=e=>{let s=(0,i.useRef)(0);return s.current+=1,(0,i.useEffect)(()=>{console.log("".concat(e," 渲染次数: ").concat(s.current))}),s.current},o=e=>{let{children:s}=e,[n,d]=(0,i.useState)({id:0,content:"初始消息",timestamp:Date.now(),type:"system"}),[o]=(0,i.useState)({id:999,content:"这是一个稳定的消息，不会变化",timestamp:Date.now(),type:"system"}),[x,c]=(0,i.useState)(0);(0,i.useEffect)(()=>{let e=setInterval(()=>{d(e=>({id:e.id+1,content:"实时消息 ".concat(e.id+1," - ").concat(new Date().toLocaleTimeString()),timestamp:Date.now(),type:"notification"})),c(e=>e+1)},1e3);return()=>clearInterval(e)},[]);let p=(0,i.useCallback)(e=>{d(s=>({...s,content:e,timestamp:Date.now(),type:"user"}))},[]),h=(0,i.useMemo)(()=>({message:n,stableMessage:o,updateMessage:p,messageCount:x}),[n,o,p,x]),a=l("MessageProvider");return(0,r.jsx)(t.Provider,{value:h,children:(0,r.jsxs)("div",{style:{padding:"10px",margin:"10px",border:"2px solid #ff6b6b",backgroundColor:"#ffe6e6"},children:[(0,r.jsxs)("h3",{children:["MessageProvider (渲染次数: ",a,")"]}),(0,r.jsxs)("p",{children:["变化的消息ID: ",n.id]}),(0,r.jsxs)("p",{children:["变化的消息内容: ",n.content]}),(0,r.jsxs)("p",{children:["稳定的消息ID: ",o.id]}),(0,r.jsxs)("p",{children:["稳定的消息内容: ",o.content]}),(0,r.jsxs)("p",{children:["总消息数: ",x]}),s]})})},x=()=>{let{message:e}=d(),s=l("ChildComponent1");return(0,r.jsxs)("div",{style:{padding:"10px",margin:"10px",border:"1px solid #4ecdc4",backgroundColor:"#e0f9f6"},children:[(0,r.jsxs)("h3",{children:["子组件1 (使用Context) - 渲染次数: ",s]}),(0,r.jsxs)("p",{children:["消息ID: ",e.id]}),(0,r.jsxs)("p",{children:["消息内容: ",e.content]}),(0,r.jsxs)("p",{children:["消息类型: ",e.type]})]})},c=()=>{let{message:e,updateMessage:s}=d(),n=l("ChildComponent2");return(0,r.jsxs)("div",{style:{padding:"10px",margin:"10px",border:"1px solid #45b7d1",backgroundColor:"#e0f4f8"},children:[(0,r.jsxs)("h3",{children:["子组件2 (使用Context + 更新功能) - 渲染次数: ",n]}),(0,r.jsxs)("p",{children:["消息ID: ",e.id]}),(0,r.jsxs)("p",{children:["消息内容: ",e.content]}),(0,r.jsxs)("p",{children:["消息类型: ",e.type]}),(0,r.jsx)("button",{onClick:()=>s("手动更新 - ".concat(Date.now())),children:"手动更新消息"})]})},p=()=>{let[e,s]=(0,i.useState)(0),n=l("ChildComponent3");return(0,r.jsxs)("div",{style:{padding:"10px",margin:"10px",border:"1px solid #96ceb4",backgroundColor:"#e8f5e8"},children:[(0,r.jsxs)("h3",{children:["子组件3 (不使用Context) - 渲染次数: ",n]}),(0,r.jsxs)("p",{children:["本地状态: ",e]}),(0,r.jsx)("button",{onClick:()=>s(e=>e+1),children:"增加本地状态"})]})},h=i.memo(()=>{let{message:e}=d(),s=l("OptimizedChildComponent");return(0,r.jsxs)("div",{style:{padding:"10px",margin:"10px",border:"1px solid #feca57",backgroundColor:"#fff9e0"},children:[(0,r.jsxs)("h3",{children:["优化子组件 (使用React.memo) - 渲染次数: ",s]}),(0,r.jsxs)("p",{children:["消息ID: ",e.id]}),(0,r.jsxs)("p",{children:["消息内容: ",e.content]}),(0,r.jsxs)("p",{children:["消息类型: ",e.type]})]})}),a=i.memo(e=>{let{message:s}=e,n=l("MemoizedPropsComponent");return(0,r.jsxs)("div",{style:{padding:"10px",margin:"10px",border:"1px solid #ff6b35",backgroundColor:"#fff4e6"},children:[(0,r.jsxs)("h3",{children:["Memoized Props组件 (真正展示memo效果) - 渲染次数: ",n]}),(0,r.jsxs)("p",{children:["消息ID: ",s.id]}),(0,r.jsxs)("p",{children:["消息内容: ",s.content]}),(0,r.jsxs)("p",{children:["消息类型: ",s.type]})]})}),j=()=>{let{message:e}=d(),s=l("MemoizedPropsWrapper");return(0,r.jsxs)("div",{style:{padding:"10px",margin:"10px",border:"2px solid #ff6b35",backgroundColor:"#fff4e6"},children:[(0,r.jsxs)("h3",{children:["Memoized Props包装器 - 渲染次数: ",s]}),(0,r.jsx)(a,{message:e})]})},m=i.memo(()=>{let{stableMessage:e}=d(),s=l("StableMemoizedComponent");return(0,r.jsxs)("div",{style:{padding:"10px",margin:"10px",border:"1px solid #2ecc71",backgroundColor:"#e8f8f5"},children:[(0,r.jsxs)("h3",{children:["稳定Memo组件 (使用稳定message) - 渲染次数: ",s]}),(0,r.jsxs)("p",{children:["消息ID: ",e.id]}),(0,r.jsxs)("p",{children:["消息内容: ",e.content]}),(0,r.jsxs)("p",{children:["消息类型: ",e.type]}),(0,r.jsx)("p",{style:{color:"#27ae60",fontWeight:"bold"},children:"✅ 这个组件应该很少重新渲染，因为stableMessage不会变化"})]})}),u=()=>{let{messageCount:e}=d(),s=l("SelectiveChildComponent");return(0,r.jsxs)("div",{style:{padding:"10px",margin:"10px",border:"1px solid #54a0ff",backgroundColor:"#e0f0ff"},children:[(0,r.jsxs)("h3",{children:["选择性订阅组件 (只订阅messageCount) - 渲染次数: ",s]}),(0,r.jsxs)("p",{children:["总消息数: ",e]}),(0,r.jsx)("p",{children:"注意: 这个组件只订阅messageCount，不会因为message内容变化而重新渲染"})]})},g=()=>{let{message:e}=d(),s=l("MemoizedChildComponent"),n=(0,i.useMemo)(()=>(0,r.jsxs)("div",{children:[(0,r.jsxs)("p",{children:["消息ID: ",e.id]}),(0,r.jsxs)("p",{children:["消息内容: ",e.content]}),(0,r.jsxs)("p",{children:["消息类型: ",e.type]})]}),[e.id,e.content,e.type]);return(0,r.jsxs)("div",{style:{padding:"10px",margin:"10px",border:"1px solid #ff9ff3",backgroundColor:"#ffe0f8"},children:[(0,r.jsxs)("h3",{children:["Memoized子组件 (使用useMemo) - 渲染次数: ",s]}),n]})},f=()=>{let[e,s]=(0,i.useState)({}),n=(0,i.useRef)({});return(0,i.useEffect)(()=>{let e=setInterval(()=>{s({...n.current})},2e3);return()=>clearInterval(e)},[]),(0,r.jsxs)("div",{style:{padding:"15px",margin:"15px",border:"2px solid #2c3e50",backgroundColor:"#34495e",color:"white"},children:[(0,r.jsx)("h3",{children:"性能监控面板"}),(0,r.jsx)("div",{style:{display:"grid",gridTemplateColumns:"repeat(2, 1fr)",gap:"10px"},children:Object.entries(e).map(e=>{let[s,n]=e;return(0,r.jsxs)("div",{style:{padding:"5px",backgroundColor:"#2c3e50",borderRadius:"4px"},children:[(0,r.jsxs)("strong",{children:[s,":"]})," ",n," 次渲染"]},s)})})]})},C=()=>(l("DemoApp"),(0,r.jsxs)("div",{style:{padding:"20px",fontFamily:"Arial, sans-serif"},children:[(0,r.jsx)("h1",{children:"Context 重新渲染性能测试 Demo"}),(0,r.jsx)("p",{children:"这个demo测试Context透传实时消息是否会导致所有子组件重新渲染"}),(0,r.jsx)("p",{children:"消息每1秒更新一次，请观察控制台输出和渲染次数"}),(0,r.jsxs)("div",{style:{marginTop:"20px",padding:"15px",backgroundColor:"#f8f9fa",borderRadius:"8px"},children:[(0,r.jsx)("h2",{children:"测试结果说明："}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"使用Context的子组件"}),": 会在Context值变化时重新渲染"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"不使用Context的子组件"}),": 不会因为Context变化而重新渲染"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"React.memo + 变化的数据"}),": 不起作用！因为数据一直在变化（如message.id递增）"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"React.memo + 稳定的数据"}),": 起作用！当数据真正稳定时，memo可以避免重新渲染"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"React.memo + Props传递"}),": 真正起作用！通过props传递数据可以避免不必要的重新渲染"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"useMemo"}),": 可以优化渲染性能，减少重复计算"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"选择性订阅"}),": 只订阅需要的Context值，减少不必要的重新渲染"]})]})]}),(0,r.jsxs)("div",{style:{marginTop:"20px"},children:[(0,r.jsx)(f,{}),(0,r.jsx)(x,{}),(0,r.jsx)(c,{}),(0,r.jsx)(p,{}),(0,r.jsx)(h,{}),(0,r.jsx)(j,{}),(0,r.jsx)(m,{}),(0,r.jsx)(u,{}),(0,r.jsx)(g,{})]}),(0,r.jsxs)("div",{style:{marginTop:"20px",padding:"15px",backgroundColor:"#fff3cd",borderRadius:"8px"},children:[(0,r.jsx)("h3",{children:"优化建议："}),(0,r.jsxs)("ol",{children:[(0,r.jsx)("li",{children:"将Context拆分为多个小的Context，避免一个Context变化影响所有组件"}),(0,r.jsx)("li",{children:"使用React.memo包装通过props接收数据的组件（对直接订阅Context的组件无效）"}),(0,r.jsx)("li",{children:"使用useMemo缓存计算结果和JSX"}),(0,r.jsx)("li",{children:"只订阅需要的Context值，避免订阅整个Context对象"}),(0,r.jsx)("li",{children:"考虑使用状态管理库（如Redux、Zustand）替代Context"}),(0,r.jsx)("li",{children:"通过props传递数据而不是直接订阅Context，这样React.memo才能起作用"}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"关键点"}),": React.memo只有在数据真正稳定时才起作用，如果数据一直在变化（如递增的ID），memo就无效"]})]})]}),(0,r.jsxs)("div",{style:{marginTop:"20px",padding:"15px",backgroundColor:"#e8f4fd",borderRadius:"8px"},children:[(0,r.jsx)("h3",{children:"\uD83D\uDD0D 为什么React.memo不起作用？"}),(0,r.jsx)("p",{children:(0,r.jsx)("strong",{children:"你的观察完全正确！"})}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"数据一直在变化"}),": message.id 每秒都在递增，导致每次都是新的对象"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"React.memo的浅比较"}),": 当props/context值变化时，memo无法阻止重新渲染"]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"Context订阅机制"}),": 直接订阅Context的组件在Context变化时会强制重新渲染"]})]}),(0,r.jsxs)("p",{children:[(0,r.jsx)("strong",{children:"解决方案"}),":"]}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"使用稳定的数据（如stableMessage）"}),(0,r.jsx)("li",{children:"通过props传递数据而不是直接订阅Context"}),(0,r.jsx)("li",{children:"只订阅真正需要的Context值"}),(0,r.jsx)("li",{children:"使用useMemo缓存计算结果"})]})]})]}));var b=()=>(0,r.jsx)(o,{children:(0,r.jsx)(C,{})}),y=()=>(0,r.jsx)(b,{})}},function(e){e.O(0,[774,888,179],function(){return e(e.s=8557)}),_N_E=e.O()}]);
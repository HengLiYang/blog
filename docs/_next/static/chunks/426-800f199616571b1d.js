"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[426],{426:function(e,t,r){r.r(t),r.d(t,{default:function(){return E}});var n=r(5271),o=r(1521),a=r(9363);let l={DEFAULT_RADIUS:1.5,GEOMETRY_SEGMENTS:24,CLOUDS_OFFSET:.01,ATMOSPHERE_OFFSET:.1,ROTATION_SPEED:1e-5,FRAME_RATE_LIMIT:16},c={BUMP_SCALE:.1,CLOUDS_OPACITY:.4,FALLBACK_COLOR:4886754,FALLBACK_SHININESS:30},u={AMBIENT_COLOR:6316128,AMBIENT_INTENSITY:1.5,DIRECTIONAL_COLOR:16777215,DIRECTIONAL_INTENSITY:.8,ADDITIONAL_LIGHT1_COLOR:4210752,ADDITIONAL_LIGHT1_INTENSITY:.6,ADDITIONAL_LIGHT2_COLOR:4210752,ADDITIONAL_LIGHT2_INTENSITY:.4,FALLBACK_AMBIENT_INTENSITY:.6,FALLBACK_DIRECTIONAL_INTENSITY:.8},i={DIRECTIONAL_LIGHT:[0,0,5],ADDITIONAL_LIGHT1:[5,0,0],ADDITIONAL_LIGHT2:[-5,0,0],FALLBACK_DIRECTIONAL_LIGHT:[5,3,5]},s={MAP_SIZE:1024},d={X:0*Math.PI,Y:0*Math.PI,Z:0},p={ATMOSPHERE_VERTEX:"\n        varying vec3 vNormal;\n        varying vec3 eyeVector;\n        \n        void main() {\n            vec4 mvPos = modelViewMatrix * vec4(position, 1.0);\n            vNormal = normalize(normalMatrix * normal);\n            eyeVector = normalize(mvPos.xyz);\n            gl_Position = projectionMatrix * mvPos;\n        }\n    ",ATMOSPHERE_FRAGMENT:"\n        varying vec3 vNormal;\n        varying vec3 eyeVector;\n        uniform float atmOpacity;\n        uniform float atmPowFactor;\n        uniform float atmMultiplier;\n        \n        void main() {\n            float dotP = dot(vNormal, eyeVector);\n            float factor = pow(dotP, atmPowFactor) * atmMultiplier;\n            \n            vec3 atmColor = vec3(0.27 + dotP/15.0, 0.35 + dotP/15.0, 0.5 + dotP/12.0);\n            \n            gl_FragColor = vec4(atmColor, atmOpacity) * factor;\n        }\n    "},I={ALBEDO:"/textures/Albedo.jpg",NIGHT_LIGHTS:"/textures/night_lights.png",BUMP:"/textures/Bump.jpg",CLOUDS:"/textures/Clouds.png"};var E=e=>{let{worldRadius:t=l.DEFAULT_RADIUS,isRotating:r=!0,rotationAxis:E=new o.Pa4(0,1,0),selectedSatellite:T=null}=e,{scene:g,camera:h,renderer:m,resourceManager:S,isLoaded:L,setIsLoaded:A}=(0,n.useContext)(a.SceneContext),O=(0,n.useRef)({group:null,earth:null,clouds:null,atmosphere:null,lights:{ambient:null,directional:null,additionalLights:[]},geometry:null,materials:{earth:null,clouds:null,atmosphere:null},textures:{dayMap:null,nightMap:null,bumpMap:null,specularMap:null,cloudsMap:null},worldRadius:t,updateFunctionId:null}),_=(0,n.useMemo)(()=>({atmOpacity:.4,atmPowFactor:4.1,atmMultiplier:9.5}),[]),M=(0,n.useMemo)(()=>E,[E.x,E.y,E.z]);return(0,n.useEffect)(()=>{O.current.group&&(T?(O.current.group.visible=!1,console.log("Earth: 隐藏地球模型")):(O.current.group.visible=!0,console.log("Earth: 显示地球模型")))},[T]),(0,n.useEffect)(()=>{if(!g||!h||!m||!S){console.log("Earth: 场景、相机、渲染器或资源管理器不可用");return}A(!1),console.log("Earth: 开始加载地球模型");let e=new o.ZAu;e.name="earth-group",e.rotation.set(d.X,d.Y,d.Z),g.add(e),O.current.group=e,e.position.set(0,0,0);let r=new o.xo$(t,l.GEOMETRY_SEGMENTS,l.GEOMETRY_SEGMENTS);return O.current.geometry=r,(async()=>{try{console.log("Earth: 开始加载纹理文件"),console.log("Earth: 开始加载纹理文件，路径:",{ALBEDO:I.ALBEDO,NIGHT_LIGHTS:I.NIGHT_LIGHTS,BUMP:I.BUMP,CLOUDS:I.CLOUDS});let[n,a,d,E,T]=await Promise.all([S.loadTexture(I.ALBEDO),S.loadTexture(I.NIGHT_LIGHTS),S.loadTexture(I.BUMP),S.loadTexture("/textures/Ocean.png"),S.loadTexture(I.CLOUDS)]);console.log("Earth: 纹理加载完成"),n.wrapS=o.uWy,n.wrapT=o.uWy,n.colorSpace=o.KI_,d.wrapS=o.uWy,d.wrapT=o.uWy,d.colorSpace=o.aCh,E.wrapS=o.uWy,E.wrapT=o.uWy,E.colorSpace=o.aCh;let g=new o.xoR({map:n,bumpMap:d,bumpScale:c.BUMP_SCALE,specularMap:E,specular:new o.Ilk(2254506),shininess:25,emissive:new o.Ilk(16755712),emissiveMap:a,emissiveIntensity:3.5,color:new o.Ilk(15792383)}),h=new o.xoR({map:T,transparent:!0,opacity:c.CLOUDS_OPACITY}),m=new o.jyz({vertexShader:p.ATMOSPHERE_VERTEX,fragmentShader:p.ATMOSPHERE_FRAGMENT,uniforms:{atmOpacity:{value:_.atmOpacity},atmPowFactor:{value:_.atmPowFactor},atmMultiplier:{value:_.atmMultiplier}},transparent:!0,side:o._Li}),L=new o.Kj0(r,g);L.name="earth-mesh",L.renderOrder=1,e.add(L),O.current.earth=L;let M=new o.xo$(t+l.CLOUDS_OFFSET,l.GEOMETRY_SEGMENTS,l.GEOMETRY_SEGMENTS),N=new o.Kj0(M,h);N.name="clouds-mesh",e.add(N),O.current.clouds=N;let R=new o.xo$(t+l.ATMOSPHERE_OFFSET,l.GEOMETRY_SEGMENTS,l.GEOMETRY_SEGMENTS),v=new o.Kj0(R,m);v.name="atmosphere-mesh",e.add(v),O.current.atmosphere=v,O.current.materials.earth=g,O.current.materials.clouds=h,O.current.materials.atmosphere=m,O.current.textures.dayMap=n,O.current.textures.nightMap=a,O.current.textures.bumpMap=d,O.current.textures.specularMap=E,O.current.textures.cloudsMap=T;let w=new o.Mig(u.AMBIENT_COLOR,u.AMBIENT_INTENSITY);e.add(w),O.current.lights.ambient=w;let D=new o.Mig(4210752,.4);e.add(D),O.current.lights.additionalLights.push(D);let P=new o.Ox3(u.DIRECTIONAL_COLOR,u.DIRECTIONAL_INTENSITY);P.position.set(...i.DIRECTIONAL_LIGHT),P.castShadow=!0,P.shadow.mapSize.width=s.MAP_SIZE,P.shadow.mapSize.height=s.MAP_SIZE,e.add(P),O.current.lights.directional=P;let C=new o.Ox3(u.ADDITIONAL_LIGHT1_COLOR,u.ADDITIONAL_LIGHT1_INTENSITY);C.position.set(...i.ADDITIONAL_LIGHT1),e.add(C),O.current.lights.additionalLights.push(C);let f=new o.Ox3(u.ADDITIONAL_LIGHT2_COLOR,u.ADDITIONAL_LIGHT2_INTENSITY);f.position.set(...i.ADDITIONAL_LIGHT2),e.add(f),O.current.lights.additionalLights.push(f);let y=new o.cek(16777215,.5,10);y.position.set(0,0,3),e.add(y),O.current.lights.additionalLights.push(y),A(!0),console.log("Earth: 地球模型加载完成，设置isLoaded为true")}catch(s){console.error("Earth: 纹理加载失败，使用备用方案",s);let t=new o.xoR({color:c.FALLBACK_COLOR,shininess:c.FALLBACK_SHININESS}),n=new o.Kj0(r,t);n.name="earth-mesh-fallback",e.add(n),O.current.earth=n,O.current.materials.earth=t;let a=new o.Mig(u.AMBIENT_COLOR,u.FALLBACK_AMBIENT_INTENSITY);e.add(a),O.current.lights.ambient=a;let l=new o.Ox3(u.DIRECTIONAL_COLOR,u.FALLBACK_DIRECTIONAL_INTENSITY);l.position.set(...i.FALLBACK_DIRECTIONAL_LIGHT),e.add(l),O.current.lights.directional=l,A(!0),console.log("Earth: 备用地球创建完成，设置isLoaded为true")}})(),()=>{}},[g,h,m,S,t,_]),(0,n.useEffect)(()=>{O.current.group&&(console.log("Earth: 设置地球位置"),O.current.group.position.set(0,0,0),O.current.group.scale.set(1,1,1),O.current.group.name="earth-group")},[O.current.group]),(0,n.useEffect)(()=>{if(!r||!O.current.group||!S)return;let e=0,t=S.registerUpdateFunction(t=>{0===e&&(e=t);let r=t-e;if(e=t,!(r<l.FRAME_RATE_LIMIT)&&O.current.group){let e=l.ROTATION_SPEED*r;O.current.group.rotateOnAxis(M,e)}});return O.current.updateFunctionId=t,()=>{null!==O.current.updateFunctionId&&S&&(S.unregisterUpdateFunction(O.current.updateFunctionId),O.current.updateFunctionId=null)}},[r,M,S]),null}},9363:function(e,t,r){r.r(t),r.d(t,{SceneContext:function(){return u},SceneProvider:function(){return i}});var n=r(2676),o=r(5271),a=r(1521),l=r(8957),c=r(7577);let u=(0,o.createContext)({scene:null,camera:null,renderer:null,controls:null,isInitialized:!1,isRotating:!1,setIsRotating:()=>{},resourceManager:null,getEntityRegistry:()=>null,isLoaded:!1,setIsLoaded:()=>{}}),i=e=>{let{children:t,containerRef:r}=e,[i,s]=(0,o.useState)(!1),[d,p]=(0,o.useState)(!0),[I,E]=(0,o.useState)(!1),T=(0,o.useRef)(null),g=(0,o.useRef)(null),h=(0,o.useRef)(null),m=(0,o.useRef)(null),S=(0,o.useRef)(null),L=(0,o.useRef)(new Map),A=(0,o.useRef)([]),O=(0,o.useRef)(1),_=(0,o.useRef)({entities:new Map,register(e){if(this.entities.has(e.id)){console.warn("SceneProvider: 实体ID冲突，已存在ID为 ".concat(e.id," 的实体，将被替换"));let t=this.entities.get(e.id);t&&t.object.parent&&(t.object.parent.remove(t.object),t.dispose())}this.entities.set(e.id,e),console.log("SceneProvider: 注册实体 [".concat(e.type,"] ID: ").concat(e.id))},get(e){return this.entities.get(e)},getByType(e){let t=[];return this.entities.forEach(r=>{r.type===e&&t.push(r)}),t},remove(e){let t=this.entities.get(e);t&&(t.object.parent&&t.object.parent.remove(t.object),t.dispose(),this.entities.delete(e),console.log("SceneProvider: 移除实体 ID: ".concat(e)))},has(e){return this.entities.has(e)},clear(){Array.from(this.entities.keys()).forEach(e=>this.remove(e)),console.log("SceneProvider: 清空所有实体")}}),M=(0,o.useRef)(null);(0,o.useEffect)(()=>{if(!r.current){console.log("SceneProvider: 容器元素不可用，等待DOM加载");return}let e=new a.xsS;e.background=new a.Ilk(0),T.current=e;let t=r.current.clientWidth,n=r.current.clientHeight,o=t-380,u=new a.cPb(40,o/n,.1,2e3);g.current=u;let i=new l.CP7({antialias:!0});i.setSize(t,n),i.setPixelRatio(window.devicePixelRatio),i.setViewport(380,0,o,n),i.shadowMap.enabled=!0,i.shadowMap.type=a.ntZ,i.outputColorSpace=a.KI_,i.toneMapping=a.uL9,i.toneMappingExposure=1,r.current.appendChild(i.domElement),h.current=i,console.log("SceneProvider: 渲染器设置完成",{shadowMapEnabled:i.shadowMap.enabled,outputColorSpace:i.outputColorSpace,toneMapping:i.toneMapping,toneMappingExposure:i.toneMappingExposure});let d=new c.z(u,i.domElement);d.enableDamping=!0,d.dampingFactor=.05,d.minDistance=3,d.maxDistance=8,d.enablePan=!1,d.rotateSpeed=.5,d.zoomSpeed=.5,m.current=d;let p=new a.dpR;M.current={textureLoader:p,loadTexture:e=>new Promise((t,r)=>{p.load(e,r=>{h.current&&(r.anisotropy=Math.min(4,h.current.capabilities.getMaxAnisotropy())),(e.includes("Albedo")||e.includes("night_lights"))&&(r.colorSpace=a.KI_),r.generateMipmaps=!0,r.minFilter=a.D1R,r.magFilter=a.wem,t(r)},t=>{console.log("SceneProvider: 纹理加载进度: ".concat(e," - ").concat(t.loaded,"/").concat(t.total))},t=>{console.error("SceneProvider: 纹理加载失败: ".concat(e),t),r(t)})}),registerUpdateFunction:e=>{let t=O.current++;return L.current.set(t,e),console.log("SceneProvider: 已注册更新函数 ID: ".concat(t)),t},unregisterUpdateFunction:e=>{L.current.delete(e),console.log("SceneProvider: 已注销更新函数 ID: ".concat(e))},registerForCleanup:e=>{A.current.push(e),console.log("SceneProvider: 已注册清理函数")},entityRegistry:_.current};let I=()=>{if(!r.current||!h.current||!g.current)return;let e=r.current.clientWidth,t=r.current.clientHeight,n=Math.max(e-380,1);g.current.aspect=n/t,g.current.updateProjectionMatrix(),h.current.setSize(e,t),h.current.setViewport(380,0,n,t)};window.addEventListener("resize",I);let E=0,N=e=>{S.current=requestAnimationFrame(N),!(e-E<16.666666666666668)&&(E=e,m.current&&m.current.update(),L.current.forEach(t=>{t(e)}),h.current&&T.current&&g.current&&h.current.render(T.current,g.current))};return N(0),s(!0),console.log("SceneProvider: Three.js环境初始化完成"),()=>{if(console.log("SceneProvider: 开始清理Three.js资源"),window.removeEventListener("resize",I),S.current&&(cancelAnimationFrame(S.current),S.current=null,console.log("SceneProvider: 动画帧已取消")),M.current&&M.current.entityRegistry&&(console.log("SceneProvider: 清理所有注册的实体"),M.current.entityRegistry.clear()),console.log("SceneProvider: 执行 ".concat(A.current.length," 个注册的清理函数")),A.current.forEach(e=>{try{e()}catch(e){console.error("执行清理函数时出错:",e)}}),L.current.clear(),A.current=[],h.current){try{r.current&&r.current.contains(h.current.domElement)&&(r.current.removeChild(h.current.domElement),console.log("SceneProvider: 渲染器DOM元素已移除"))}catch(e){console.error("移除渲染器DOM元素时出错:",e)}h.current.dispose(),h.current.forceContextLoss(),h.current=null,console.log("SceneProvider: 渲染器已释放")}m.current&&(m.current.dispose(),m.current=null,console.log("SceneProvider: 控制器已释放")),T.current=null,g.current=null,M.current=null,console.log("SceneProvider: Three.js资源清理完成")}},[r]);let N=(0,o.useMemo)(()=>({scene:T.current,camera:g.current,renderer:h.current,controls:m.current,isInitialized:i,resourceManager:M.current,isRotating:d,setIsRotating:p,getEntityRegistry:()=>{var e;return(null===(e=M.current)||void 0===e?void 0:e.entityRegistry)||null},isLoaded:I,setIsLoaded:E}),[i,d,I]);return(0,n.jsx)(u.Provider,{value:N,children:t})};t.default=i}}]);